/* tslint:disable */
/* eslint-disable */
/**
 * wiegaaterkoffiehalen OpenAPI
 * wiegaaterkoffiehalen OpenAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Group,
  GroupsPostRequest,
} from '../models/index';
import {
    GroupFromJSON,
    GroupToJSON,
    GroupsPostRequestFromJSON,
    GroupsPostRequestToJSON,
} from '../models/index';

export interface GroupsGroupIdDeleteRequest {
    groupId: string;
    accessToken: string;
}

export interface GroupsGroupIdGetRequest {
    groupId: string;
    accessToken: string;
}

export interface GroupsGroupIdPatchRequest {
    groupId: string;
    accessToken: string;
    groupsPostRequest?: GroupsPostRequest;
}

export interface GroupsPostOperationRequest {
    accessToken: string;
    groupsPostRequest?: GroupsPostRequest;
}

/**
 * 
 */
export class GroupApi extends runtime.BaseAPI {

    /**
     * Delete group
     */
    async groupsGroupIdDeleteRaw(requestParameters: GroupsGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsGroupIdDelete().'
            );
        }

        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling groupsGroupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/groups/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete group
     */
    async groupsGroupIdDelete(requestParameters: GroupsGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsGroupIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get own profile
     */
    async groupsGroupIdGetRaw(requestParameters: GroupsGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsGroupIdGet().'
            );
        }

        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling groupsGroupIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/groups/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Get own profile
     */
    async groupsGroupIdGet(requestParameters: GroupsGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.groupsGroupIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update group
     */
    async groupsGroupIdPatchRaw(requestParameters: GroupsGroupIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsGroupIdPatch().'
            );
        }

        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling groupsGroupIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/groups/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GroupsPostRequestToJSON(requestParameters['groupsPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update group
     */
    async groupsGroupIdPatch(requestParameters: GroupsGroupIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsGroupIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new group
     */
    async groupsPostRaw(requestParameters: GroupsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling groupsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/groups/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupsPostRequestToJSON(requestParameters['groupsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Create a new group
     */
    async groupsPost(requestParameters: GroupsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.groupsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
