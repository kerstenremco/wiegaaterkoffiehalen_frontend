/* tslint:disable */
/* eslint-disable */
/**
 * wiegaaterkoffiehalen OpenAPI
 * wiegaaterkoffiehalen OpenAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Drawing,
  GroupsGroupIdDrawingsDrawingIdPostRequest,
  GroupsGroupIdDrawingsPostRequest,
} from '../models/index';
import {
    DrawingFromJSON,
    DrawingToJSON,
    GroupsGroupIdDrawingsDrawingIdPostRequestFromJSON,
    GroupsGroupIdDrawingsDrawingIdPostRequestToJSON,
    GroupsGroupIdDrawingsPostRequestFromJSON,
    GroupsGroupIdDrawingsPostRequestToJSON,
} from '../models/index';

export interface GroupsGroupIdDrawingsDrawingIdGetRequest {
    groupId: string;
    drawingId: string;
    accessToken: string;
}

export interface GroupsGroupIdDrawingsDrawingIdPostOperationRequest {
    groupId: string;
    drawingId: string;
    accessToken: string;
    groupsGroupIdDrawingsDrawingIdPostRequest: GroupsGroupIdDrawingsDrawingIdPostRequest;
}

export interface GroupsGroupIdDrawingsPostOperationRequest {
    groupId: string;
    accessToken: string;
    groupsGroupIdDrawingsPostRequest?: GroupsGroupIdDrawingsPostRequest;
}

/**
 * 
 */
export class GroupDrawingsApi extends runtime.BaseAPI {

    /**
     * Get a drawing
     */
    async groupsGroupIdDrawingsDrawingIdGetRaw(requestParameters: GroupsGroupIdDrawingsDrawingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Drawing>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsGroupIdDrawingsDrawingIdGet().'
            );
        }

        if (requestParameters['drawingId'] == null) {
            throw new runtime.RequiredError(
                'drawingId',
                'Required parameter "drawingId" was null or undefined when calling groupsGroupIdDrawingsDrawingIdGet().'
            );
        }

        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling groupsGroupIdDrawingsDrawingIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/groups/{groupId}/drawings/{drawingId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))).replace(`{${"drawingId"}}`, encodeURIComponent(String(requestParameters['drawingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DrawingFromJSON(jsonValue));
    }

    /**
     * Get a drawing
     */
    async groupsGroupIdDrawingsDrawingIdGet(requestParameters: GroupsGroupIdDrawingsDrawingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Drawing> {
        const response = await this.groupsGroupIdDrawingsDrawingIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add order
     */
    async groupsGroupIdDrawingsDrawingIdPostRaw(requestParameters: GroupsGroupIdDrawingsDrawingIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsGroupIdDrawingsDrawingIdPost().'
            );
        }

        if (requestParameters['drawingId'] == null) {
            throw new runtime.RequiredError(
                'drawingId',
                'Required parameter "drawingId" was null or undefined when calling groupsGroupIdDrawingsDrawingIdPost().'
            );
        }

        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling groupsGroupIdDrawingsDrawingIdPost().'
            );
        }

        if (requestParameters['groupsGroupIdDrawingsDrawingIdPostRequest'] == null) {
            throw new runtime.RequiredError(
                'groupsGroupIdDrawingsDrawingIdPostRequest',
                'Required parameter "groupsGroupIdDrawingsDrawingIdPostRequest" was null or undefined when calling groupsGroupIdDrawingsDrawingIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/groups/{groupId}/drawings/{drawingId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))).replace(`{${"drawingId"}}`, encodeURIComponent(String(requestParameters['drawingId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupsGroupIdDrawingsDrawingIdPostRequestToJSON(requestParameters['groupsGroupIdDrawingsDrawingIdPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add order
     */
    async groupsGroupIdDrawingsDrawingIdPost(requestParameters: GroupsGroupIdDrawingsDrawingIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsGroupIdDrawingsDrawingIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Start drawing
     */
    async groupsGroupIdDrawingsPostRaw(requestParameters: GroupsGroupIdDrawingsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsGroupIdDrawingsPost().'
            );
        }

        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling groupsGroupIdDrawingsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/groups/{groupId}/drawings/`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupsGroupIdDrawingsPostRequestToJSON(requestParameters['groupsGroupIdDrawingsPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Start drawing
     */
    async groupsGroupIdDrawingsPost(requestParameters: GroupsGroupIdDrawingsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsGroupIdDrawingsPostRaw(requestParameters, initOverrides);
    }

}
