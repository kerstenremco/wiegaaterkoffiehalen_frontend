/* tslint:disable */
/* eslint-disable */
/**
 * wiegaaterkoffiehalen OpenAPI
 * wiegaaterkoffiehalen OpenAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GroupsGroupIdMembersPostRequest,
  GroupsGroupIdMembersUserIdDeleteRequest,
  GroupsGroupIdMembersUserIdPatchRequest,
  MemberAdded,
} from '../models/index';
import {
    GroupsGroupIdMembersPostRequestFromJSON,
    GroupsGroupIdMembersPostRequestToJSON,
    GroupsGroupIdMembersUserIdDeleteRequestFromJSON,
    GroupsGroupIdMembersUserIdDeleteRequestToJSON,
    GroupsGroupIdMembersUserIdPatchRequestFromJSON,
    GroupsGroupIdMembersUserIdPatchRequestToJSON,
    MemberAddedFromJSON,
    MemberAddedToJSON,
} from '../models/index';

export interface GroupsGroupIdMembersPostOperationRequest {
    groupId: string;
    accessToken: string;
    groupsGroupIdMembersPostRequest: GroupsGroupIdMembersPostRequest;
}

export interface GroupsGroupIdMembersUserIdDeleteOperationRequest {
    groupId: string;
    userId: string;
    accessToken: string;
    groupsGroupIdMembersUserIdDeleteRequest: GroupsGroupIdMembersUserIdDeleteRequest;
}

export interface GroupsGroupIdMembersUserIdPatchOperationRequest {
    groupId: string;
    userId: string;
    accessToken: string;
    groupsGroupIdMembersUserIdPatchRequest: GroupsGroupIdMembersUserIdPatchRequest;
}

/**
 * 
 */
export class GroupMemberApi extends runtime.BaseAPI {

    /**
     * Add a groupmember
     */
    async groupsGroupIdMembersPostRaw(requestParameters: GroupsGroupIdMembersPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberAdded>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsGroupIdMembersPost().'
            );
        }

        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling groupsGroupIdMembersPost().'
            );
        }

        if (requestParameters['groupsGroupIdMembersPostRequest'] == null) {
            throw new runtime.RequiredError(
                'groupsGroupIdMembersPostRequest',
                'Required parameter "groupsGroupIdMembersPostRequest" was null or undefined when calling groupsGroupIdMembersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/groups/{groupId}/members`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupsGroupIdMembersPostRequestToJSON(requestParameters['groupsGroupIdMembersPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberAddedFromJSON(jsonValue));
    }

    /**
     * Add a groupmember
     */
    async groupsGroupIdMembersPost(requestParameters: GroupsGroupIdMembersPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberAdded> {
        const response = await this.groupsGroupIdMembersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a groupmember
     */
    async groupsGroupIdMembersUserIdDeleteRaw(requestParameters: GroupsGroupIdMembersUserIdDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsGroupIdMembersUserIdDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling groupsGroupIdMembersUserIdDelete().'
            );
        }

        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling groupsGroupIdMembersUserIdDelete().'
            );
        }

        if (requestParameters['groupsGroupIdMembersUserIdDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'groupsGroupIdMembersUserIdDeleteRequest',
                'Required parameter "groupsGroupIdMembersUserIdDeleteRequest" was null or undefined when calling groupsGroupIdMembersUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/groups/{groupId}/members/{userId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: GroupsGroupIdMembersUserIdDeleteRequestToJSON(requestParameters['groupsGroupIdMembersUserIdDeleteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a groupmember
     */
    async groupsGroupIdMembersUserIdDelete(requestParameters: GroupsGroupIdMembersUserIdDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsGroupIdMembersUserIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update a groupmember
     */
    async groupsGroupIdMembersUserIdPatchRaw(requestParameters: GroupsGroupIdMembersUserIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsGroupIdMembersUserIdPatch().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling groupsGroupIdMembersUserIdPatch().'
            );
        }

        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling groupsGroupIdMembersUserIdPatch().'
            );
        }

        if (requestParameters['groupsGroupIdMembersUserIdPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'groupsGroupIdMembersUserIdPatchRequest',
                'Required parameter "groupsGroupIdMembersUserIdPatchRequest" was null or undefined when calling groupsGroupIdMembersUserIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/groups/{groupId}/members/{userId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GroupsGroupIdMembersUserIdPatchRequestToJSON(requestParameters['groupsGroupIdMembersUserIdPatchRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a groupmember
     */
    async groupsGroupIdMembersUserIdPatch(requestParameters: GroupsGroupIdMembersUserIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsGroupIdMembersUserIdPatchRaw(requestParameters, initOverrides);
    }

}
