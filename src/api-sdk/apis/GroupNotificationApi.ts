/* tslint:disable */
/* eslint-disable */
/**
 * wiegaaterkoffiehalen OpenAPI
 * wiegaaterkoffiehalen OpenAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GroupsGroupIdNotificationsPostRequest,
} from '../models/index';
import {
    GroupsGroupIdNotificationsPostRequestFromJSON,
    GroupsGroupIdNotificationsPostRequestToJSON,
} from '../models/index';

export interface GroupsGroupIdNotificationsPostOperationRequest {
    groupId: string;
    accessToken: string;
    groupsGroupIdNotificationsPostRequest: GroupsGroupIdNotificationsPostRequest;
}

/**
 * 
 */
export class GroupNotificationApi extends runtime.BaseAPI {

    /**
     * Turn of / off notifications
     */
    async groupsGroupIdNotificationsPostRaw(requestParameters: GroupsGroupIdNotificationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsGroupIdNotificationsPost().'
            );
        }

        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling groupsGroupIdNotificationsPost().'
            );
        }

        if (requestParameters['groupsGroupIdNotificationsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'groupsGroupIdNotificationsPostRequest',
                'Required parameter "groupsGroupIdNotificationsPostRequest" was null or undefined when calling groupsGroupIdNotificationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/groups/{groupId}/notifications`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupsGroupIdNotificationsPostRequestToJSON(requestParameters['groupsGroupIdNotificationsPostRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Turn of / off notifications
     */
    async groupsGroupIdNotificationsPost(requestParameters: GroupsGroupIdNotificationsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsGroupIdNotificationsPostRaw(requestParameters, initOverrides);
    }

}
