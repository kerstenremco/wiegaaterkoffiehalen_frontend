/* tslint:disable */
/* eslint-disable */
/**
 * wiegaaterkoffiehalen OpenAPI
 * wiegaaterkoffiehalen OpenAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UsersGet200Response,
  UsersPatch200Response,
  UsersPatchRequest,
} from '../models/index';
import {
    UsersGet200ResponseFromJSON,
    UsersGet200ResponseToJSON,
    UsersPatch200ResponseFromJSON,
    UsersPatch200ResponseToJSON,
    UsersPatchRequestFromJSON,
    UsersPatchRequestToJSON,
} from '../models/index';

export interface UsersGetRequest {
    accessToken: string;
}

export interface UsersPatchOperationRequest {
    accessToken: string;
    usersPatchRequest?: UsersPatchRequest;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Get own profile
     */
    async usersGetRaw(requestParameters: UsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersGet200Response>> {
        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling usersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get own profile
     */
    async usersGet(requestParameters: UsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersGet200Response> {
        const response = await this.usersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit own profile
     */
    async usersPatchRaw(requestParameters: UsersPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersPatch200Response>> {
        if (requestParameters['accessToken'] == null) {
            throw new runtime.RequiredError(
                'accessToken',
                'Required parameter "accessToken" was null or undefined when calling usersPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['accessToken'] != null) {
            headerParameters['access-token'] = String(requestParameters['accessToken']);
        }

        const response = await this.request({
            path: `/users`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UsersPatchRequestToJSON(requestParameters['usersPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPatch200ResponseFromJSON(jsonValue));
    }

    /**
     * Edit own profile
     */
    async usersPatch(requestParameters: UsersPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersPatch200Response> {
        const response = await this.usersPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
